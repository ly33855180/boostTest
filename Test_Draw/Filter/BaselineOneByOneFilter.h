#pragma once
#include "Filter/FilterType.h"
#include "FilterOneByOneInterface.h"
#define N_BASE 80
// 逐点进行基线滤波
template<class T>
class CBaselineOneByOneFilter :public IFilterOneByOne<T>
{
public:	
	CBaselineOneByOneFilter(int iMultiple, double *dbH);
	~CBaselineOneByOneFilter() {};
	T Filter(T data);
private:
	double *m_h;
	int m_nMultiple;
	bool m_bInit;
public:	
	double m_xBuf[N_BASE * 2 * 20 + 1];
};

template<class T>
CBaselineOneByOneFilter<T>::CBaselineOneByOneFilter(
	int iMultiple, double *dbH)
	: m_nMultiple(iMultiple),
	m_bInit(false),
	m_h(dbH)
{
}

template<class T>
T CBaselineOneByOneFilter<T>::Filter(T data)
{
	double *h = m_h;

	// 原函数，将在此处进行起搏分离
	int iBlockSize = m_nMultiple;
	int i;
	int nBufferSize = N_BASE * 2 * iBlockSize;
	if (!m_bInit)
	{
		for (i = 0; i < nBufferSize + 1; i++)
		{
			m_xBuf[i] = data;
		}
		m_bInit = true;
	}

	m_xBuf[nBufferSize] = data;

	double ret = h[N_BASE] * m_xBuf[N_BASE * iBlockSize];

	for (i = 0; i < N_BASE; i++)
	{
		ret += h[i] * (m_xBuf[i * iBlockSize] + m_xBuf[(N_BASE * 2 - i) * iBlockSize]);
	}

	for (i = 0; i < nBufferSize; i++)
	{
		m_xBuf[i] = m_xBuf[i + 1];
	}

	// 原函数逻辑；
	// 进行低通滤波；
	// 添加起搏信号；
	return static_cast<T>(ret);
}

template<class T>
class C003HzBaseLineFilter :public CBaselineOneByOneFilter<T>
{
public:
	C003HzBaseLineFilter(int iMultiple) :CBaselineOneByOneFilter<T>(iMultiple, m_h_03){}
public:
	static double m_h_03[N_BASE + 1];
};

template<class T>
double C003HzBaseLineFilter<T>::m_h_03[N_BASE + 1] =
{
	0.00001973326733,-0.00005613986689,-0.00013685893820,-0.00022247289389,-0.00031302196464,
	-0.00040853740197,-0.00050904123364,-0.00061454603763,-0.00072505473568,-0.00084056040702,
	-0.00096104612315,-0.00108648480408,-0.00121683909698,-0.00135206127747,-0.00149209317429,
	-0.00163686611765,-0.00178630091176,-0.00194030783168,-0.00209878664503,-0.00226162665848,
	-0.00242870678934,-0.00259989566225,-0.00277505173097,-0.00295402342522,-0.00313664932248,
	-0.00332275834450,-0.00351216997826,-0.00370469452111,-0.00390013334968,-0.00409827921203,
	-0.00429891654264,-0.00450182179956,-0.00470676382313,-0.00491350421554,-0.00512179774048,
	-0.00533139274205,-0.00554203158206,-0.00575345109478,-0.00596538305818,-0.00617755468063,
	-0.00638968910198,-0.00660150590784,-0.00681272165610,-0.00702305041421,-0.00723220430627,
	-0.00743989406843,-0.00764582961155,-0.00784972058957,-0.00805127697244,-0.00825020962217,
	-0.00844623087063,-0.00863905509780,-0.00882839930901,-0.00901398370978,-0.00919553227695,
	-0.00937277332464,-0.00954544006377,-0.00971327115360,-0.00987601124412,-0.01003341150792,
	-0.01018523016015,-0.01033123296539,-0.01047119373014,-0.01060489477969,-0.01073212741827,
	-0.01085269237122,-0.01096640020820,-0.01107307174634,-0.01117253843225,-0.01126464270210,
	-0.01134923831870,-0.01142619068488,-0.01149537713232,-0.01155668718500,-0.01161002279691,
	-0.01165529856303,-0.01169244190341,-0.01172139321964,-0.01174210602344,-0.01175454703700,
	0.98800286130911
};
template<class T>
class C007HzBaseLineFilter :public CBaselineOneByOneFilter<T>
{
public:
	C007HzBaseLineFilter(int iMultiple) :CBaselineOneByOneFilter<T>(iMultiple,m_h_07){}
public:
	static double m_h_07[N_BASE + 1];
};

template<class T>
double C007HzBaseLineFilter<T>::m_h_07[N_BASE + 1] =
{  // 0.8Hz
	-0.00174172605455,-0.00183191994101,-0.00190674124767,-0.00196413224584,-0.00200212801611,
	-0.00201888668406,-0.00201271959284,-0.00198212104135,-0.00192579720961,-0.00184269389037,
	-0.00173202264784,-0.00159328503144,-0.00142629448351,-0.00123119559638,-0.00100848039474,
	-0.00075900134459,-0.00048398081934,-0.00018501678722,0.00013591547873,0.00047646582644,
	0.00083391590126,0.00120519014239,0.00158687112062,0.00197521918988,0.00236619637489,
	0.00275549436705,0.00313856645086,0.00351066313394,0.00386687120648,0.00420215591028,
	0.00451140585506,0.00478948028001,0.00503125822305,0.00523168912840,0.00538584439659,
	0.00548896935903,0.00553653514295,0.00552428988189,0.00544830872202,0.00530504207608,
	0.00509136158385,0.00480460325188,0.00444260726479,0.00400375398589,0.00348699569651,
	0.00289188366005,0.00221859013872,0.00146792503773,0.00064134690258,-0.00025903195031,
	-0.00123044633144,-0.00226948520587,-0.00337210488996,-0.00453364839260,-0.00574887081250,
	-0.00701197063902,-0.00831662674124,-0.00965604076811,-0.01102298462392,-0.01240985262676,
	-0.01380871790538,-0.01521139254139,-0.01660949092044,-0.01799449571771,-0.01935782591085,
	-0.02069090618725,-0.02198523709287,-0.02323246525701,-0.02442445302158,-0.02555334680451,
	-0.02661164353510,-0.02759225451473,-0.02848856607812,-0.02929449645959,-0.03000454830387,
	-0.03061385630230,-0.03111822948240,-0.03151418773059,-0.03179899218466,-0.03197066919290,
	0.96799913092711
};

//	FilterMode = 1;
// 《生物医学信号的处理和识别》p.393
//0.7Hz 梳状滤波 50Hz=20ms 200Hz=5ms k=20ms/5ms=4 M=51
/*	int N_BASE_07 = 25;
static double h_07[25+1]= {
-5.4993255e-3, -6.4745539e-3, -7.5221240e-3, -8.6368920e-3, -9.8120641e-3, -1.1040002e-2, -1.2312434e-2,
-1.3619501e-2, -1.4950967e-2, -1.6295794e-2, -1.7642381e-2, -1.8978699e-2, -2.0292454e-2, -2.1571244e-2,
-2.2802272e-2, -2.3974842e-2, -2.5075577e-2, -2.6094020e-2, -2.7019581e-2, -2.7842614e-2, -2.8554460e-2,
-2.9147575e-2, -2.9615629e-2, -2.9953601e-2, -3.0157856e-2, 9.69773812e-1 };*/

//0.7Hz/50Hz/N=30
/*	int N_BASE_07 = 30;
static double h_07[30+1]= {
-2.368937412048684e-3,-2.986728712348780e-3,-3.673699692663545e-3,-4.428881513599647e-3,-5.250428231185524e-3,-6.135603850985268e-3,
-7.080781893653822e-3,-8.081457802531160e-3,-9.132274322852480e-3,-1.022705977552025e-2,-1.135887893965024e-2,-1.252009605085888e-2,
-1.370244922010471e-2,-1.489713538438720e-2,-1.609490471917714e-2,-1.728616327636163e-2,-1.846108246375014e-2,-1.960971385552609e-2,
-2.072210771981210e-2,-2.178843357172364e-2,-2.279910100946210e-2,-2.374487906822326e-2,-2.461701233257253e-2,-2.540733208255740e-2,
-2.610836081178962e-2,-2.671340854612968e-2,-2.721665950805879e-2,-2.761324781247903e-2,-2.789932104226667e-2,-2.807209073374630e-2,
9.719964627120528e-1
};
*/
//0.7Hz/50Hz/N=40
/*	int N_BASE_07 = 40;
static double h_07[40+1]= {
2.098731559173803e-3, 1.885318864712895e-3, 1.621213428931248e-3, 1.303959897258035e-3, 9.314982975400069e-4, 5.022055428633152e-4,
1.493317847727143e-5,-5.309592072612090e-4,-1.135575444392712e-3,-1.798459600079756e-3,-2.518578580124171e-3,-3.294310872868779e-3,
-4.123441723120853e-3,-5.003164946720430e-3,-5.930091515294649e-3,-6.900264956653126e-3,-7.909183530306662e-3,-8.951829050889466e-3,
-1.002270214601269e-2,-1.111586365046052e-2,-1.222498175683333e-2,-1.334338446489186e-2,-1.446411679906304e-2,-1.558000219687225e-2,
-1.668370741143194e-2,-1.776781021941496e-2,-1.882486918294202e-2,-1.984749468016834e-2,-2.082842039559193e-2,-2.176057444761910e-2,
-2.263714932796254e-2,-2.345166983512223e-2,-2.419805820247182e-2,-2.487069565015248e-2,-2.546447962873719e-2,-2.597487607099258e-2,
-2.639796602543134e-2,-2.673048611097808e-2,-2.696986230511937e-2,-2.711423665741799e-2, 9.720228116488857e-1
};
*/
// 0.7Hz/50Hz/N=50